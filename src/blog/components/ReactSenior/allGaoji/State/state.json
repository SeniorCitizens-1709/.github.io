[
  {
    "title": "props",
    "cont": [
      {
        "p": "定义：父组件传递给子组件的数据就叫做属性"
      },
      {
        "p": "：props 只能由父组件去修改，子组件是无法修改父组件传递过来的属性的"
      },
      {
        "p": "props 更新后也会触发子组件的更新阶段"
      }
    ]
  },
  {
    "title": "state 状态",
    "cont": [
      {
        "p": "定义：组件自由的状态，用来存数据的，它可以被组件自己修改"
      },
      {
        "p": "修改 state 使用 this.setState 方法，该方法接收一个对象，setState 会在内部将新的值和 state 旧的值进行合并"
      },
      {
        "p": "state 一旦被修改就会触发组件更新阶段"
      }
    ]
  },
  {
    "title": "state 和 props 的对比",
    "cont": [
      {
        "p": "相同点：都是存数据、存值的，值被修改时都会触发组件更新"
      },
      {
        "p": "不同点:props：父组件传递给子的，只能由父组件修改，子组件不能修改"
      },
      {
        "p": "state：组件自身的一种状态，自己可以修改"
      }
    ]
  },
  {
    "title": "setState",
    "cont": [
      {
        "p": ".setState不会立即改变react组件中的state值"
      },
      {
        "p": ".setState通过触发一次组件的更新来引发重绘"
      },
      {
        "p": ".多次setState函数调用产生的效果会合并"
      }
    ]
  },
  {
    "title": "setState：异步",
    "cont": [
      {
        "p": "事件处理函数内部的setState是异步的"
      },
      {
        "p": ".这种机制可以再大型应用中得到很好的性能提升"
      },
      {
        "p": ".由于setState是异步的，所以在他调用后立即获取值是拿不到更改好了的最新的值的，所以setStat接收两个回调函数，第一个函数设置值，第二个用来获取最新的值，第一个函数接收一个state参数，该参数就是this.state的映射。第二个函数没有参数"
      }
    ]
  }
]
